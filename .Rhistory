str(par())
par(mar = c(2, 2,2 ))
par(mar = c(2, 2,2 ,2))
plot(x, y)
par(mar = c(4, 4, 2, 1))
par(mar = c(4, 4, 2, 2))
plot(x, y)
plot(x, y, pch = 20)
plot(x, y, pch = 19)
plot(x, y, pch = 18)
plot(x, y, pch = 2)
plot(x, y, pch = 3)
plot(x, y, pch = 1)
plot(x, y, pch = 14)
plot(x, y, pch = 10)
plot(x, y, pch = 30)
example(points)
example(points)
plot(x, y, pch = 22)
plot(x, y)
x
y
x <- rnorm(100)
y <- rnorm(100)
plot(x, y, pch = 22)
plot(x, y, pch = 22, col = "yellow", bg = "red")
par("bg")
par("bg", "yellow")
plot(x, y, pch = 22, col = "yellow", bg = "red")
plot(x, y, pch = 20)
title("Scatterplot")
text(-2, -2, "A Label")
legend("topright", legend = "data", pch = 20)
fit <- lm(y ~ x)
abline(fit)
abline(fit, lwd = 3)
abline(fit, lwd = 1, col = "red")
abline(fit, lwd = 30)
abline(fit, lwd = 1, col = "red")
plot(x, y, xlab = "Weight", ylab = "Height", main = "Scatterplot", pch = 20)
legend("topright", legend = "Data", pch = 20)
fit <- lm(y ~ x)
abline(fit, col = "yellow")
abline(fit, col = "black")
abline(fit, col = "yellow", lwd = 2)
abline(fit, col = "black")
z <- rpois(100, 2)
par(mfrow = c(2, 1))
plot(x, y, pch = 20)
plot(x, y, pch = 19)
plot(x, z, pch = 19)
plot(x, z, pch = 20)
par(mar = c(2, 2, 1, 1))
plot(x, z, pch = 20)
plot(y, z, pch = 19)
par(mfrow = c(2, 2))
par(mfcol = c(2, 2))
plot(x, y)
plot(x, z)
plot(y, z)
plot(y, x)
par(mfrow = c(1, 1))
x <- rnorm(100)
y <- x+rnorm(100)
g <- gl(2, 50)
g
g <- gl(2, 50, labels = c("Male", "Female"))
g
str(g)
plot(x, y)
plot(x, y, type = "n")
plot(x[g == "Male"], y[g == "Male"], col = "green")
plot(x, y, type = "n")
points(x[g == "Male"], y[g == "Male"], col = "green")
points(x[g == "Female"], y[g == "Female"], col = "blue")
g
object.size(x <- 1:2000000)
8*9
setwd("~/Desktop/Projects/Coding/Online Classes/Exploratory Data Analysis")
ls()
dir()
rm(list=ls())
ls()
dir()
data <- read.csv("household_power_consumption.txt")
Q
qui
quit
q
bye
s
stop
head(data)
str(data)
?read.table
data <- read.table("household_power_consumption.txt", header = TRUE, sep=";")
str(head)
str(data)
data <- read.table("household_power_consumption.txt", header = TRUE, sep=";", colClass = c("Date", "character", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric"))
data <- read.table("household_power_consumption.txt", header = TRUE, sep=";", colClass = c("Date", "character", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric"))
data <- read.table("household_power_consumption.txt", header = TRUE, sep=";", colClass = c("Date", "character", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric"), na.strings = "?")
str(data)
dataChars <- read.table("household_power_consumption.txt", header = TRUE, sep=";", colClass = c("character"), na.strings = "?")
str(dataChars)
dataCharsAtDate <- dataChars[Date == "01/02/2007"]
dataCharsAtDate <- dataChars[dataChars$Date == "01/02/2007"]
dataCharsAtDate
dataCharsAtDate <- dataChars[dataChars$Date == "16/12/2006"]
dataCharsAtDate <- dataChars[,dataChars$Date == "01/02/2007"]
str(dataCharsAtDate)
dataCharsAtDate <- dataChars[dataChars$Date == "01/02/2007",]
str(dataCharsAtDate)
any(dataChars$Date == "01/02/2007")
any(dataChars$Date == "16/12/2006")
any(dataChars$Date == "02/02/2007")
str(dataChars$Date)
str(as.Factor(dataChars$Date))
str(as.factor(dataChars$Date))
as.factor(dataChars$Date)
any("2007" %in% dataChars$Date)
dataChars$Date
which(dataChars$Date == "01/02/2007")
which(dataChars$Date == "01/02/2006")
which(dataChars$Date == "23/12/2006")
which(dataChars$Date == "01/01/2007")
which(dataChars$Date == "01/01/2006")
which(dataChars$Date == "31/12/2006")
dataCharsAtDate <- dataChars[dataChars$Date == "1/2/2007",]
str(dataCharsAtDate)
dataCharsAtDate <- dataChars[dataChars$Date == "1/2/2007" | dataChars$Date == "2/2/2007",]
str(dataCharsAtDate)
as.Date(dataChars$Date)
data <- dataCharsAtDate
as.Date(data$Date)
dates <- as.Date(data$Date)
dates[1]
dates <- as.Date(data$Date, "dd/mm/yyyy")
dates[1]
?as.Date
?strptime
dates <- as.Date(data$Date, "%d/%m/%y")
dates[1]
dates <- as.Date(data$Date, "%d-%m-%y")
dates[1]
dates <- as.Date(data$Date, "%d/%m/%Y")
dates[1]
dates[2]
dates[2000]
data$Date <- dates
data
str(date)
str(data)
?strptime
strptime(data$Time, format = "%H:%M:%S")
strptime(paste(dataChars$Date, data$Time), format = "%d/%m/%Y %H:%M:%S")
ls()
strptime(paste(dataCharsAtDate$Date, data$Time), format = "%d/%m/%Y %H:%M:%S")
str(dataAsChars)
ls()
source('~/Desktop/Projects/Coding/Online Classes/Exploratory Data Analysis/fileReader.R')
rm(list = ls())
data <- readData()
source('~/Desktop/Projects/Coding/Online Classes/Exploratory Data Analysis/fileReader.R')
data <- readData()
source('~/Desktop/Projects/Coding/Online Classes/Exploratory Data Analysis/fileReader.R')
source('~/Desktop/Projects/Coding/Online Classes/Exploratory Data Analysis/fileReader.R')
source('~/Desktop/Projects/Coding/Online Classes/Exploratory Data Analysis/fileReader.R')
source('~/Desktop/Projects/Coding/Online Classes/Exploratory Data Analysis/fileReader.R')
data <- formatData()
source('~/Desktop/Projects/Coding/Online Classes/Exploratory Data Analysis/fileReader.R')
data <- formatData()
str(data)
? %in% data
"?" %in% data
NA %in% data
source('~/Desktop/Projects/Coding/Online Classes/Exploratory Data Analysis/fileReader.R')
source('~/Desktop/Projects/Coding/Online Classes/Exploratory Data Analysis/ExData_Plotting1/plot4.R')
source('~/Desktop/Projects/Coding/Online Classes/Exploratory Data Analysis/ExData_Plotting1/plot4.R')
source('~/Desktop/Projects/Coding/Online Classes/Exploratory Data Analysis/ExData_Plotting1/plot1.R')
source('~/Desktop/Projects/Coding/Online Classes/Exploratory Data Analysis/ExData_Plotting1/plot2.R')
source('~/Desktop/Projects/Coding/Online Classes/Exploratory Data Analysis/ExData_Plotting1/plot3.R')
source('~/Desktop/Projects/Coding/Online Classes/Exploratory Data Analysis/ExData_Plotting1/plot4.R')
source('~/Desktop/Projects/Coding/Online Classes/Exploratory Data Analysis/ExData_Plotting1/plot4.R')
source('~/Desktop/Projects/Coding/Online Classes/Exploratory Data Analysis/ExData_Plotting1/plot4.R')
source('~/Desktop/Projects/Coding/Online Classes/Exploratory Data Analysis/ExData_Plotting1/plot4.R')
source('~/Desktop/Projects/Coding/Online Classes/Exploratory Data Analysis/ExData_Plotting1/plot1.R')
source('~/Desktop/Projects/Coding/Online Classes/Exploratory Data Analysis/ExData_Plotting1/plot2.R')
source('~/Desktop/Projects/Coding/Online Classes/Exploratory Data Analysis/ExData_Plotting1/plot3.R')
setwd("~/Desktop/Projects/Coding/Online Classes/Reproducible Research/RepData_PeerAssessment1")
ls()
data
rm(data)
ls
ls()
rm(list=ls())
ls
ls()
dir()
data <- read.csv("activity.csv")
summary(data)
head(data)
dim(data)
data[10000:10020,]
data[10200:10220,]
as.POSIXlt(data$date)
as.POSIXlt(data$date)[1]
data$date[1]
data <- read.csv("activity.csv")
# Process the dates into POSIXlt
data$date <- as.POSIXlt(data$date)
head(data, 20)
cleandata <- data[!is.na(data$steps)]
cleandata <- data[!is.na(data$steps),]
head(cleandata)
data.table(cleantable)
data.table
?data.table
??data.table
?base.table
table(cleandata)
head(data)
data$date[1]
for(date in data$date)
print(date)
as.factor(data.date)
as.factor(data$date)
head(data$date)
data <- read.csv("activity.csv")
head(data)
head(data$date)
aggregate(data$steps, list(day = data$date), mean)
summary(data$interval)
data$interval[10020]
data$interval[10050]
data$interval[10080]
data$interval[10081]
data[10070:10090]
data[10070:10090,]
?data.frame
dates <- data[!is.na(data$steps),date]
dates <- data[!is.na(data$steps),"date"]
head(dates)
dim(dates)
length(dates)
?levels
levels(data$date)
dates <- levels(data$date)
for(date in dates) {}
for(date in dates)
print(date)
sum(data["steps",data$date == date])
sum(data[data$date == date, "steps"])
head(Data)
head(data)
?data.frame
totalsteps
data <- read.csv("activity.csv")
# Process the dates into POSIXlt
# data$date <- as.POSIXlt(data$date)
# Remove NAs
cleandata <- data[!is.na(data$steps),]
# Sum up the number of steps for each day
dates <- levels(data$date)
totalsteps <- numeric()
index <- 1
for(date in dates) {
totalsteps[index] <- sum(as.numeric(cleandata[cleandata$date == date, "steps"]))
index <- index + 1
}
head(totalsteps)
class(totalsteps)
df <- data.frame(totalsteps, dates)
head(df)
head(df$totalsteps)
class(df$totalsteps)
median <- median(cleandata$totalsteps)
```{r}
mean <- mean(cleandata$totalsteps)
median <- median(cleandata$totalsteps)
---
title: "Reproducible Research: Peer Assessment 1"
output:
html_document:
keep_md: true
---
## Loading and preprocessing the data
```{r cache=TRUE}
data <- read.csv("activity.csv")
# Process the dates into POSIXlt
# data$date <- as.POSIXlt(data$date)
# Remove NAs
cleandata <- data[!is.na(data$steps),]
# Sum up the number of steps for each day
dates <- levels(data$date)
totalsteps <- numeric()
index <- 1
for(date in dates) {
totalsteps[index] <- sum(as.numeric(cleandata[cleandata$date == date, "steps"]))
index <- index + 1
}
# Overwrite the clean data with the properly formatted clean data
cleandata <- data.frame(totalsteps, dates)
```
## What is mean total number of steps taken per day?
```{r}
mean <- mean(cleandata$totalsteps)
median <- median(cleandata$totalsteps)
```
The mean number of steps taken each day is **`r mean`**.
The median number of steps taken each day is **`r median`**.
## What is the average daily activity pattern?
```{r}
```
## Imputing missing values
```{r}
```
## Are there differences in activity patterns between weekdays and weekends?
```{r}
```
data <- read.csv("activity.csv")
# Process the dates into POSIXlt
# data$date <- as.POSIXlt(data$date)
# Remove NAs
cleandata <- data[!is.na(data$steps),]
# Sum up the number of steps for each day
dates <- levels(data$date)
totalsteps <- numeric()
index <- 1
for(date in dates) {
totalsteps[index] <- sum(as.numeric(cleandata[cleandata$date == date, "steps"]))
index <- index + 1
}
# Overwrite the clean data with the properly formatted clean data
cleandata <- data.frame(totalsteps, dates)
mean <- mean(cleandata$totalsteps)
median <- median(cleandata$totalsteps)
median
head(cleandata)
hist(cleandata)
?hist
hist(cleandata$totalsteps)
hist(cleandata$totalsteps, breaks = 10)
hist(cleandata$totalsteps, breaks = 10, main="Histogram of Steps per Day")
hist(cleandata$totalsteps, breaks = 10, main="Histogram of Total Steps per Day")
hist(cleandata$totalsteps, breaks = 10, main="Histogram of Total Steps per Day", xlab = "Total Steps")
hist(cleandata$totalsteps, breaks = 10, main="Histogram of Total Steps per Day", xlab = "Total Steps", col = "red")
hist(cleandata$totalsteps, breaks = 10, main="Histogram of Total Steps per Day", xlab = "Total Steps", col = "yellow")
hist(cleandata$totalsteps, breaks = 10, main="Histogram of Total Steps per Day", xlab = "Total Steps", col = "black")
hist(cleandata$totalsteps, breaks = 10, main="Histogram of Total Steps per Day", xlab = "Total Steps", col = "blue")
hist(cleandata$totalsteps, breaks = 10, main="Histogram of Total Steps per Day", xlab = "Total Steps", col = "lightgreen")
?plot
# Sum up the number of steps for each day
intervals <- levels(data$intervals)
totalsteps <- numeric()
index <- 1
for(interval in intervals) {
totalsteps[index] <- sum(as.numeric(data.clean[data.celan$interval == interval, "steps"]))
index <- index + 1
}
# Overwrite the clean data with the properly formatted clean data
data.intervalsums <- data.frame(totalsteps, intervals)
plot(data.intervalsums$intervals, data.intervalsums$totalsteps, type ="l")
```
plot(data.intervalsums$intervals, data.intervalsums$totalsteps, type ="l")
str(data.intervalsums)
intervals
levels(data$intervals)
data$interval
# Sum up the number of steps for each day
intervals <- levels(data$interval)
totalsteps <- numeric()
index <- 1
for(interval in intervals) {
totalsteps[index] <- sum(as.numeric(data.clean[data.celan$interval == interval, "steps"]))
index <- index + 1
}
# Overwrite the clean data with the properly formatted clean data
data.intervalsums <- data.frame(totalsteps, intervals)
intervcals
intervals
data$interval
levels(data$interval)
data <- read.csv("activity.csv", colClasses = c("numeric", "factor", "factor"))
# Remove NAs
data.clean <- data[!is.na(data$steps),]
# Sum up the number of steps for each day
dates <- levels(data$date)
totalsteps <- numeric()
index <- 1
for(date in dates) {
totalsteps[index] <- sum(as.numeric(data.clean[data.clean$date == date, "steps"]))
index <- index + 1
}
data.daysums <- data.frame(totalsteps, dates)
# Sum up the number of steps for each day
intervals <- levels(data$interval)
totalsteps <- numeric()
index <- 1
for(interval in intervals) {
totalsteps[index] <- sum(as.numeric(data.clean[data.clean$interval == interval, "steps"]))
index <- index + 1
}
# Overwrite the clean data with the properly formatted clean data
data.intervalsums <- data.frame(totalsteps, intervals)
levels(data$interval)
data$interval
levels(data$interval)
sort(levels(data$interval))
sort(as.numeric(levels(data$interval)))
intervals <- as.character(sort(as.numeric(levels(data$interval))))
intervals
totalsteps
totalsteps <- numeric()
totalsteps
index <- 1
(interval in intervals) {
totalsteps[index] <- sum(as.numeric(data.clean[data.clean$interval == interval, "steps"]))
index <- index + 1
}
for(interval in intervals) {
totalsteps[index] <- sum(as.numeric(data.clean[data.clean$interval == interval, "steps"]))
index <- index + 1
}
totalsteps
list(steps = data$steps)
str(list(steps = data$steps))
head(list(steps = data$steps), 100)
?aggregate
aggregate(list(steps = data$steps), by = list(intervals = data$interval), FUN = mean)
aggregate(list(steps = data$steps), by = list(intervals = data$interval), FUN = mean, na.rm = TRUE)
length(is.na(data.intervalsums$steps))
data.intervalsums$steps
data.intervalsums$step
index <- 1
for(index; index < length(data); index <- index + 1) {
}
index <- 1
for(index; index < length(data); index <- index + 1) {
}
index <- 1
while(index < length(data)) {
index <- index + 1
}
head(data.intervalsums)
length(dta)
length(data)
head(data)
nrows(data)
?nrows
??nrows
nrow(data)
data.filled <- data
index <- 1
printed <- 0
while(index < nrow(data)) {
if(is.na(data[index, "steps"])) {
if(printed < 10) {
print(paste("NA found at: ", index))
printed <- printed + 1
}
data.filled[index, "steps"] <- data.intervalsums[which(data.intervalsums$intervals == data[index, "interval"]), "steps"]
}
index <- index + 1
}
summary(data.filled)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
str(data.filled)
str(data.filled$steps)
which(data.filled$steps == NA)
summary(data.f)
summary(data.filled$steps)
tail(data.filled$steps)
source('~/.active-rstudio-document', echo=TRUE)
head(data.filled)
data.intervalsums
?aggregate
head(data.filled)
source('~/.active-rstudio-document', echo=TRUE)
?POSIXlt
as.POXISlt("2015-01-14")
?as.POSIXlt
as.POSIXlt("2015-01-14")
dt <- as.POSIXlt("2015-01-14")
dt
str(dt)
dt["wdayt"]
dt["wday"]
dt$wday
weekday <- function(date) {
posix.date <- as.POSIXlt(date)
if(posix.date$wday %in% c("0", "6"))
return("weekend")
else
return("weekday")
}
weekday("2015-01-15")
weekday("2015-01-14")
weekday("2015-01-16")
weekday("2015-01-17")
weekday("2015-01-1")
weekday("2015-01-18")
weekday("2015-01-19")
data.weekday <- data
index <- 1
while(index <= nrow(data)) {
data.weekday[index,"weekday"] <- weekday(data[index, "date"])
index <- index + 1
}
head(data.weekday)
source('~/.active-rstudio-document', echo=TRUE)
data.weekday
